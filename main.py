import asyncio
import os
import re
import random
import json
import sys
from pathlib import Path
from typing import List, Optional

from telethon.sync import TelegramClient
from telethon import errors
from telethon.tl.functions.channels import (
 CreateChannelRequest, 
 DeleteChannelRequest, 
 InviteToChannelRequest,
 EditAdminRequest
)
from telethon.tl.types.chat import ChannelAdminRights 
from telethon.tl.types import InputPeerUser, PeerChannel
# --------------------------------------------------

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ---
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = Path('farm_stats.json') 

class Colors:
  RED = '\033[91m'
  GREEN = '\033[92m'
  YELLOW = '\033[93m'
  BLUE = '\033[94m'
  CYAN = '\033[96m'
  ENDC = '\033[0m'

class ConfigManager:
  def __init__(self):
    self.config_path = Path('config.json')
    self.defaults = {
      'API_ID': os.getenv('API_ID', None),
      'API_HASH': os.getenv('API_HASH', None),
      'RECIPIENT_ID': os.getenv('RECIPIENT_ID', '2113692455'),
      'BOT_ID': 7209725448,
      'MIN_DELAY': 1.0,
      'MAX_DELAY': 3.0
    }
    self.config = self._load_config()

  def _load_config(self):
    if self.config_path.exists():
      try:
        with open(self.config_path, 'r') as f:
          data = json.load(f)
          return {**self.defaults, **data}
      except json.JSONDecodeError:
        print(f"{Colors.YELLOW}–§–∞–π–ª config.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.{Colors.ENDC}")
        return self.defaults
    return self.defaults

  def _save_config(self):
    with open(self.config_path, 'w') as f:
      json.dump(self.config, f, indent=4)

  def get(self, key):
    return self.config.get(key)

  def set(self, key, value):
    self.config[key] = value
    self._save_config()

class StatsManager:
  def __init__(self):
    self.stats_path = STATS_FILE
    self.stats = self._load_stats()

  def _load_stats(self):
    if self.stats_path.exists():
      try:
        with open(self.stats_path, 'r') as f:
          return json.load(f)
      except json.JSONDecodeError:
        print(f"{Colors.YELLOW}–§–∞–π–ª {self.stats_path} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.{Colors.ENDC}")
        return {}
    return {}

  def _save_stats(self):
    with open(self.stats_path, 'w') as f:
      json.dump(self.stats, f, indent=4)

  def update_stats(self, session_name: str, farmed_nuts: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if session_name not in self.stats:
      self.stats[session_name] = {'total_farmed': 0, 'runs': 0}

    self.stats[session_name]['total_farmed'] += farmed_nuts
    self.stats[session_name]['runs'] += 1
    self._save_stats()

  def display_stats(self):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    total_farmed_all = 0
    print(f"\n{Colors.BLUE}--- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ê–†–ú–ò–ù–ì–ê ---{Colors.ENDC}")
    if not self.stats:
      print(f"{Colors.YELLOW}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.{Colors.ENDC}")
      return

    for session, data in self.stats.items():
      print(f"[{session}] –ù–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ: {Colors.GREEN}{data['total_farmed']:,}{Colors.ENDC} –æ—Ä–µ—à–∫–æ–≤ –∑–∞ {data['runs']} —Ü–∏–∫–ª–æ–≤.")
      total_farmed_all += data['total_farmed']

    print("-" * 30)
    print(f"–ò–¢–û–ì–û: {Colors.GREEN}{total_farmed_all:,}{Colors.ENDC} –æ—Ä–µ—à–∫–æ–≤.")
    print("--------------------------")

class SessionManager:
 def __init__(self, config: ConfigManager, stats: StatsManager):
  self.config = config
  self.stats = stats
  self.sessions_dir = Path('sessions')
  self.sessions_dir.mkdir(exist_ok=True)
  # API ID/HASH —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ ConfigManager –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ,
  # –Ω–æ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
  self.api_id = self.config.get('API_ID')
  self.api_hash = self.config.get('API_HASH')

  if not self.api_id or not self.api_hash:
   pass

 def get_sessions(self) -> List[str]:
  return [f.stem for f in self.sessions_dir.glob('*.session')]

 async def add_session(self, phone: str):
  session_name = str(self.sessions_dir / phone.replace('+', '').replace(' ', ''))

  if not self.config.get('API_ID') or not self.config.get('API_HASH'):
   print(f"{Colors.RED}–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é: —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API_ID –∏ API_HASH (–û–ø—Ü–∏—è 5).{Colors.ENDC}")
   return

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  api_id = int(self.config.get('API_ID'))
  api_hash = self.config.get('API_HASH')

  client = TelegramClient(session_name, api_id, api_hash)

  try:
   await client.start(
    phone=phone,
    code_callback=lambda: input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –≤ Telegram –∏–ª–∏ SMS): {Colors.ENDC}"),
    password=lambda: input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA): {Colors.ENDC}")
   )

   me = await client.get_me()
   if me:
    print(f"{Colors.GREEN}‚úì –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è: {me.first_name} (@{me.username if me.username else '–±–µ–∑ username'}){Colors.ENDC}")
   else:
    print(f"{Colors.RED}–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.{Colors.ENDC}")

  except Exception as e:
   print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}{Colors.ENDC}")
  finally:
   await client.disconnect()

 async def start_farm_single_session(self, session_name: str, recipient_id: str):
  SESSION_PATH = self.sessions_dir / session_name
  channel_id = None

  if not SESSION_PATH.with_suffix('.session').exists():
   print(f"{Colors.RED}–°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.{Colors.ENDC}")
   return

  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å
  if not self.config.get('API_ID') or not self.config.get('API_HASH'):
   print(f"{Colors.RED}–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º–∏–Ω–≥: API_ID –∏–ª–∏ API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–û–ø—Ü–∏—è 5).{Colors.ENDC}")
   return

  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  api_id = int(self.config.get('API_ID'))
  api_hash = self.config.get('API_HASH')

  client = TelegramClient(str(SESSION_PATH), api_id, api_hash)
  group_title = f"FarmGroup_{session_name}_{random.randint(1000, 9999)}"

  try:
   await client.start()
   me = await client.get_me()

   print(f"{Colors.GREEN}[{session_name}] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {me.first_name}. –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∞—Ä–º-—Ü–∏–∫–ª...{Colors.ENDC}")

   # 1. –°–æ–∑–¥–∞–Ω–∏–µ –°–£–ü–ï–†–ì–†–£–ü–ü–´ (Channel)
   print(f"[{session_name}] –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã '{group_title}'...")

   result = await client(CreateChannelRequest(
    title=group_title,
    about="–í—Ä–µ–º–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è —Ñ–∞—Ä–º–∞",
    megagroup=True 
   ))

   group_entity = result.chats[0]
   channel_id = group_entity.id 

   bot_entity = await client.get_input_entity('suslikmetrbot')

   await client(InviteToChannelRequest(
    channel=group_entity,
    users=[bot_entity]
   ))
   print(f"[{session_name}] –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")

   # –í–ö–õ–Æ–ß–ê–ï–ú –ê–ù–û–ù–ò–ú–ù–û–°–¢–¨ –ß–ï–†–ï–ó TL.TYPES
   user_peer = await client.get_input_entity(me.id)

   admin_rights = ChannelAdminRights(
    post_messages=True, 
    add_admins=False,
    change_info=False,
    delete_messages=True,
    ban_users=False,
    invite_users=True,
    pin_messages=False,
    invite_link=False,
    edit_messages=True,
    other=False
   )

   await client(EditAdminRequest(
    channel=group_entity,
    user_id=user_peer,
    admin_rights=admin_rights,
    rank='AnonFarm'
   ))
   print(f"[{session_name}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ (Supergroup).{Colors.ENDC}")

   # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥
   commands = ['/treat', '/iron', '/treat', '/bonus', '/profile']

   for cmd in commands:
    await client.send_message(group_entity, cmd)
    print(f"[{session_name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ (—á–µ—Ä–µ–∑ Supergroup): {cmd}")
    await asyncio.sleep(random.uniform(self.config.get('MIN_DELAY'), self.config.get('MAX_DELAY')))

   # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /profile (–ø–∞—Ä—Å–∏–Ω–≥ –æ—Ä–µ—à–∫–æ–≤)
   messages = await client.get_messages(group_entity, limit=20) 
   profile_message = None

   for msg in messages:
    if msg.sender_id == self.config.get('BOT_ID') and msg.message and '–ü—Ä–æ—Ñ–∏–ª—å' in msg.message:
     profile_message = msg.message
     break

   nuts_balance = 0
   if profile_message:
    match = re.search(r"üå∞ –û—Ä–µ—à–∫–æ–≤: ([\d,]+)", profile_message)
    if match:
     nuts_balance_str = match.group(1).replace(',', '').strip()
     nuts_balance = int(nuts_balance_str)
     print(f"[{session_name}] –ü–∞—Ä—Å–∏–Ω–≥: –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –æ—Ä–µ—à–∫–æ–≤: {nuts_balance}")
    else:
     print(f"{Colors.YELLOW}[{session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –æ—Ä–µ—à–∫–æ–≤.{Colors.ENDC}")
   else:
    print(f"{Colors.YELLOW}[{session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º.{Colors.ENDC}")

   # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–µ—à–∫–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
   if nuts_balance > 0:
    give_command = f"/give {nuts_balance} {recipient_id}"
    await client.send_message(group_entity, give_command)
    print(f"{Colors.CYAN}[{session_name}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {give_command} –ø–æ–ª—É—á–∞—Ç–µ–ª—é {recipient_id}{Colors.ENDC}")
    self.stats.update_stats(session_name, nuts_balance)
   else:
    print(f"[{session_name}] –ë–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–π. –û—Ä–µ—Ö–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

   # 5. –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
   await asyncio.sleep(5) 

   await client.delete_dialog(group_entity)
   await client(DeleteChannelRequest(channel=group_entity)) 
   print(f"{Colors.GREEN}[{session_name}] –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ {group_title} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.{Colors.ENDC}")

  except Exception as e:
   print(f"{Colors.RED}–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞ –¥–ª—è {session_name}: {e}{Colors.ENDC}")
  finally:
   if channel_id:
    try:
     entity = await client.get_entity(channel_id)
     await client.delete_dialog(entity)
     await client(DeleteChannelRequest(channel=entity))
    except Exception:
     pass
   await client.disconnect()

 async def start_farm_all_sessions(self):
  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–∑–æ–≤–∞ TypeError
  if not self.config.get('API_ID') or not self.config.get('API_HASH'):
   print(f"\n{Colors.RED}–û–®–ò–ë–ö–ê: API_ID –∏–ª–∏ API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é 5 (–ù–∞—Å—Ç—Ä–æ–π–∫–∏), —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∏—Ö.{Colors.ENDC}")
   return

  sessions = self.get_sessions()
  if not sessions:
   print(f"{Colors.YELLOW}–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞.{Colors.ENDC}")
   return

  tasks = [self.start_farm_single_session(session_name, self.config.get('RECIPIENT_ID')) for session_name in sessions]
  await asyncio.gather(*tasks)
  print(f"{Colors.GREEN}–í—Å–µ —Ñ–∞—Ä–º-—Ü–∏–∫–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.{Colors.ENDC}")

# --- –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ ---

def print_settings_menu(config: ConfigManager):
  """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
  while True:
    print("\n" + "="*50)
    print(f"{Colors.BLUE}--- –ù–ê–°–¢–†–û–ô–ö–ò ---{Colors.ENDC}")
    print(f"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API_ID (–¢–µ–∫—É—â–∏–π: {config.get('API_ID')})")
    print(f"2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API_HASH (–¢–µ–∫—É—â–∏–π: {'***' if config.get('API_HASH') else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})")
    print(f"3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ü–æ–ª—É—á–∞—Ç–µ–ª—è –û—Ä–µ—à–∫–æ–≤ (–¢–µ–∫—É—â–∏–π: {config.get('RECIPIENT_ID')})")
    print(f"4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ú–∏–Ω. –ó–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (–¢–µ–∫—É—â–∞—è: {config.get('MIN_DELAY')} —Å–µ–∫)")
    print(f"5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ú–∞–∫—Å. –ó–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ (–¢–µ–∫—É—â–∞—è: {config.get('MAX_DELAY')} —Å–µ–∫)")
    print("0. –ù–∞–∑–∞–¥")

    choice = input(f"\n{Colors.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: {Colors.ENDC}").strip()

    if choice == '1':
      new_id = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API_ID: {Colors.ENDC}").strip()
      if new_id.isdigit():
        config.set('API_ID', new_id)
        print(f"{Colors.GREEN}‚úì API_ID –æ–±–Ω–æ–≤–ª–µ–Ω.{Colors.ENDC}")
      else:
        print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.{Colors.ENDC}")

    elif choice == '2':
      new_hash = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API_HASH: {Colors.ENDC}").strip()
      config.set('API_HASH', new_hash)
      print(f"{Colors.GREEN}‚úì API_HASH –æ–±–Ω–æ–≤–ª–µ–Ω.{Colors.ENDC}")

    elif choice == '3':
      new_recipient = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ Username –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {Colors.ENDC}").strip()
      config.set('RECIPIENT_ID', new_recipient)
      print(f"{Colors.GREEN}‚úì –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω.{Colors.ENDC}")

    elif choice == '4':
      new_delay = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫—É (—Å–µ–∫—É–Ω–¥—ã): {Colors.ENDC}").strip()
      try:
        delay = float(new_delay)
        if delay < 0: raise ValueError
        config.set('MIN_DELAY', delay)
        print(f"{Colors.GREEN}‚úì –ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.{Colors.ENDC}")
      except ValueError:
        print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.{Colors.ENDC}")

    elif choice == '5':
      new_delay = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫—É (—Å–µ–∫—É–Ω–¥—ã): {Colors.ENDC}").strip()
      try:
        delay = float(new_delay)
        if delay < config.get('MIN_DELAY'): 
          print(f"{Colors.RED}–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∏ ({config.get('MIN_DELAY')}).{Colors.ENDC}")
        else:
          config.set('MAX_DELAY', delay)
          print(f"{Colors.GREEN}‚úì –ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.{Colors.ENDC}")
      except ValueError:
        print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.{Colors.ENDC}")

    elif choice == '0':
      return

    else:
      print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è.{Colors.ENDC}")

def main():
  config = ConfigManager()
  stats = StatsManager()
  sm = SessionManager(config, stats)

  while True:
    print("\n" + "="*50)
    print(f"{Colors.BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Colors.ENDC}")
    print(f"{Colors.BLUE}‚ïë{Colors.ENDC} {Colors.GREEN}SuslikMetr Lite - –ê–≤—Ç–æ—Ñ–∞—Ä–º –û—Ä–µ—à–∫–æ–≤{Colors.ENDC} {Colors.BLUE}‚ïë{Colors.ENDC}")
    print(f"{Colors.BLUE}‚ïë{Colors.ENDC} {Colors.YELLOW}Telethon Edition v1.41.2{Colors.ENDC} {Colors.BLUE}‚ïë{Colors.ENDC}")
    print(f"{Colors.BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.ENDC}")

    print(f"\n{Colors.GREEN}‚úì –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ä–µ—à–∫–æ–≤: {config.get('RECIPIENT_ID')}{Colors.ENDC}")

    print("\n–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
    print("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π")
    print("5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (API/–ó–∞–¥–µ—Ä–∂–∫–∏/–ü–æ–ª—É—á–∞—Ç–µ–ª—å)")
    print("6. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("0. –í—ã—Ö–æ–¥")

    choice = input(f"\n{Colors.CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: {Colors.ENDC}").strip()

    if choice == '1':
      phones_input = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Å +): {Colors.ENDC}")
      phones = [p.strip() for p in phones_input.split(',') if p.strip()]
      for phone in phones:
        if re.match(r'^\+\d+$', phone):
          asyncio.run(sm.add_session(phone))
        else:
          print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: {phone}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +79XXXXXXXXX.{Colors.ENDC}")

    elif choice == '2':
      sessions = sm.get_sessions()
      print("\n–°–û–•–†–ê–ù–ï–ù–ù–´–ï –°–ï–°–°–ò–ò:")
      if sessions:
        for idx, session in enumerate(sessions, 1):
          print(f"{idx}. {session}")
      else:
        print(f"{Colors.YELLOW}–°–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.{Colors.ENDC}")

    elif choice == '3':
      session_name = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 79001234567): {Colors.ENDC}").strip()
      if session_name in sm.get_sessions():
        asyncio.run(sm.start_farm_single_session(session_name, config.get('RECIPIENT_ID')))
      else:
        print(f"{Colors.RED}–°–µ—Å—Å–∏—è {session_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.{Colors.ENDC}")

    elif choice == '4':
      asyncio.run(sm.start_farm_all_sessions())

    elif choice == '5':
      print_settings_menu(config)
      sm = SessionManager(config, stats) 

    elif choice == '6':
      stats.display_stats()

    elif choice == '0':
      print(f"{Colors.BLUE}–í—ã—Ö–æ–¥...{Colors.ENDC}")
      break

    else:
      print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è.{Colors.ENDC}")

if __name__ == '__main__':
  if sys.version_info < (3, 7):
    print("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ.")
    sys.exit(1)

  main()