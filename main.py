import asyncio
import os
import re
import random
from pathlib import Path
from typing import List, Optional

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø 2.0.0a0 ---
from telethon import Client
from telethon import _tl as tl, errors

SessionPasswordNeededError = errors.SessionPasswordNeededError

# ----------------------------------------

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
class Colors:
  HEADER = '\033[95m'
  BLUE = '\033[94m'
  CYAN = '\033[96m'
  GREEN = '\033[92m'
  YELLOW = '\033[93m'
  RED = '\033[91m'
  ENDC = '\033[0m'
  BOLD = '\033[1m'
  UNDERLINE = '\033[4m'

def clear_screen():
  """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
  os.system('cls' if os.name == 'nt' else 'clear')

def print_logo():
  """–í—ã–≤–æ–¥ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
  logo = f"""\
{Colors.CYAN}{Colors.BOLD}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë SuslikMetr Lite - –ê–≤—Ç–æ—Ñ–∞—Ä–º –û—Ä–µ—à–∫–æ–≤ ‚ïë
‚ïë Telethon Edition v2.0 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.ENDC}
"""
  print(logo)

class SessionManager:
  def __init__(self):
    self.api_id = os.getenv('API_ID')
    self.api_hash = os.getenv('API_HASH')
    self.sessions_dir = Path('sessions')
    self.sessions_dir.mkdir(exist_ok=True)

    if not self.api_id or not self.api_hash:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞: API_ID –∏ API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!{Colors.ENDC}")
      exit(1)

  def get_sessions(self) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .session —Ñ–∞–π–ª–æ–≤"""
    return [f.stem for f in self.sessions_dir.glob('*.session')]

  async def add_session(self, phone: str):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
    session_name = f"sessions/{phone.replace('+', '').replace(' ', '')}"

    client = Client(session_name, int(self.api_id), self.api_hash)

    try:
      await client.connect()

      me = await client.get_me()

      if not me:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å client.send_code_request, –Ω–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except
       # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Å—Ä–∞–∑—É.
        try:
          await client.send_code_request(phone) 
          print(f"{Colors.YELLOW}–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone}{Colors.ENDC}")
        except AttributeError:
          print(f"{Colors.YELLOW}‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: send_code_request –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–æ–¥–∞.{Colors.ENDC}")
        except Exception as e:
          print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞: {e}{Colors.ENDC}")
          return

        code = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {Colors.ENDC}")

        try:
          # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π/–ø—Ä–æ—Å—Ç–æ–π sign_in ---
          me = await client.sign_in(phone, code)
        except SessionPasswordNeededError:
          print(f"{Colors.YELLOW}‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è{Colors.ENDC}")
          password = input(f"{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å (2FA): {Colors.ENDC}")
          me = await client.sign_in(password=password) 
        except Exception as e:
          print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}{Colors.ENDC}")
          return

      if me:
        print(f"{Colors.GREEN}‚úì –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è: {me.first_name} (@{me.username if me.username else '–±–µ–∑ username'}){Colors.ENDC}")
      else:
        print(f"{Colors.RED}–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.{Colors.ENDC}")

    except Exception as e:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}{Colors.ENDC}")
    finally:
      await client.disconnect()


class SuslikFarmer:
  def __init__(self, session_name: str, api_id: str, api_hash: str, recipient: str):
    self.session_path = f"sessions/{session_name}"
    self.api_id = int(api_id)
    self.api_hash = api_hash
    self.recipient = recipient
    self.bot_username = 'suslikmetrbot'
    self.client = Client(self.session_path, self.api_id, self.api_hash)

  async def random_delay(self, min_sec: float = 1.0, max_sec: float = 3.0):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
    await asyncio.sleep(random.uniform(min_sec, max_sec))

  async def create_group_and_add_bot(self):
    """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞"""
    try:
      # –ò–°–ü–û–õ–¨–ó–£–ï–ú client.invoke –∏ tl.functions.channels
      result = await self.client.invoke(tl.functions.channels.CreateChannelRequest(
        title=f"Farm_{random.randint(1000, 9999)}",
        about="Temporary farming group",
        megagroup=True
      ))

      channel = result.chats[0]
      print(f"{Colors.GREEN}‚úì –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {channel.title}{Colors.ENDC}")

      # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
      bot = await self.client.get_entity(self.bot_username)

      # –ò–°–ü–û–õ–¨–ó–£–ï–ú client.invoke –∏ tl.functions.channels
      await self.client.invoke(tl.functions.channels.InviteToChannelRequest(
        channel=channel,
        users=[bot]
      ))

      print(f"{Colors.GREEN}‚úì –ë–æ—Ç @{self.bot_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É{Colors.ENDC}")

      return channel

    except Exception as e:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}{Colors.ENDC}")
      return None

  async def send_command_as_channel(self, channel, command: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
    try:
      await self.client.send_message(
        entity=self.bot_username,
        message=command,
        from_peer=channel
      )
      print(f"{Colors.CYAN} ‚Üí –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}{Colors.ENDC}")

    except Exception as e:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã {command}: {e}{Colors.ENDC}")

  async def get_profile_balance(self, channel) -> Optional[int]:
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
      await self.send_command_as_channel(channel, '/profile')
      await asyncio.sleep(2)

      messages = await self.client.get_messages(self.bot_username, limit=5)

      for msg in messages:
        if msg.photo and msg.message:
          # –ü–∞—Ä—Å–∏–º –±–∞–ª–∞–Ω—Å –∏–∑ caption
          match = re.search(r'üå∞ –û—Ä–µ—à–∫–æ–≤:\s*([\d,]+)', msg.message)
          if match:
            balance_str = match.group(1).replace(',', '')
            balance = int(balance_str)
            print(f"{Colors.GREEN}‚úì –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:,} –æ—Ä–µ—à–∫–æ–≤{Colors.ENDC}")
            return balance

      print(f"{Colors.YELLOW}‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å{Colors.ENDC}")
      return None

    except Exception as e:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}{Colors.ENDC}")
      return None

  async def send_nuts(self, channel, amount: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–µ—à–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—é"""
    try:
      command = f'/give {amount} {self.recipient}'
      await self.send_command_as_channel(channel, command)
      await asyncio.sleep(2)
      print(f"{Colors.GREEN}‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount:,} –æ—Ä–µ—à–∫–æ–≤ –Ω–∞ {self.recipient}{Colors.ENDC}")

    except Exception as e:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ä–µ—à–∫–æ–≤: {e}{Colors.ENDC}")

  async def delete_group(self, channel):
    """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    try:
      # –ò–°–ü–û–õ–¨–ó–£–ï–ú client.invoke –∏ tl.functions.channels.DeleteChannelRequest
      await self.client.invoke(tl.functions.channels.DeleteChannelRequest(channel=channel))
      print(f"{Colors.GREEN}‚úì –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞{Colors.ENDC}")

    except Exception as e:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}{Colors.ENDC}")

  async def farm_cycle(self):
    """–û–¥–∏–Ω —Ü–∏–∫–ª —Ñ–∞—Ä–º–∞"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'='*50}{Colors.ENDC}")
    print(f"{Colors.BOLD}–ù–∞—á–∞—Ç —Ü–∏–∫–ª —Ñ–∞—Ä–º–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {self.session_path}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'='*50}{Colors.ENDC}\n")

    try:
      await self.client.connect()

      # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ—Ç–∞
      channel = await self.create_group_and_add_bot()
      if not channel:
        return False

      await asyncio.sleep(2)

      # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥
      commands = ['/treat', '/iron', '/treat', '/bonus']

      for cmd in commands:
        await self.send_command_as_channel(channel, cmd)
        await self.random_delay(1, 3)

      # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
      balance = await self.get_profile_balance(channel)

      # –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–µ—à–∫–∏
      if balance and balance > 0:
        await self.send_nuts(channel, balance)

      # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
      await asyncio.sleep(2)
      await self.delete_group(channel)

      print(f"\n{Colors.GREEN}‚úì –¶–∏–∫–ª —Ñ–∞—Ä–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!{Colors.ENDC}\n")
      return True

    except Exception as e:
      print(f"{Colors.RED}–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ñ–∞—Ä–º–∞: {e}{Colors.ENDC}")
      return False
    finally:
      await self.client.disconnect()

  async def start_continuous_farming(self):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ñ–∞—Ä–º"""
    cycle_count = 0
    while True:
      cycle_count += 1
      print(f"\n{Colors.YELLOW}{'='*50}")
      print(f"–¶–ò–ö–õ #{cycle_count}")
      print(f"{'='*50}{Colors.ENDC}\n")

      success = await self.farm_cycle()

      if success:
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        delay = random.randint(60, 120)
        print(f"\n{Colors.YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...{Colors.ENDC}")
        await asyncio.sleep(delay)
      else:
        print(f"\n{Colors.RED}‚ö† –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ, –æ–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç...{Colors.ENDC}")
        await asyncio.sleep(300)

def print_menu():
  """–í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
  print(f"\n{Colors.BOLD}–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:{Colors.ENDC}")
  print(f"{Colors.CYAN}1.{Colors.ENDC} –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
  print(f"{Colors.CYAN}2.{Colors.ENDC} –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏")
  print(f"{Colors.CYAN}3.{Colors.ENDC} –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏")
  print(f"{Colors.CYAN}4.{Colors.ENDC} –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π")
  print(f"{Colors.CYAN}5.{Colors.ENDC} –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ä–µ—à–∫–æ–≤")
  print(f"{Colors.CYAN}0.{Colors.ENDC} –í—ã—Ö–æ–¥")
  print()

async def main():
  manager = SessionManager()
  recipient = os.getenv('RECIPIENT', '')

  while True:
    clear_screen()
    print_logo()

    if recipient:
      print(f"{Colors.GREEN}‚úì –ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ä–µ—à–∫–æ–≤: {recipient}{Colors.ENDC}")
    else:
      print(f"{Colors.YELLOW}‚ö† –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!{Colors.ENDC}")

    print_menu()

    choice = input(f"{Colors.BOLD}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: {Colors.ENDC}").strip()

    if choice == '1':
      # –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
      phones = input(f"\n{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Å +): {Colors.ENDC}")
      phone_list = [p.strip() for p in phones.split(',')]

      for phone in phone_list:
        await manager.add_session(phone)
      print()

      input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")

    elif choice == '2':
      # –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Å—Å–∏–∏
      sessions = manager.get_sessions()
      print(f"\n{Colors.BOLD}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:{Colors.ENDC}")
      if sessions:
        for i, session in enumerate(sessions, 1):
          print(f"{Colors.CYAN}{i}.{Colors.ENDC} {session}")
      else:
        print(f"{Colors.YELLOW}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π{Colors.ENDC}")

      input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")

    elif choice == '3':
      # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
      if not recipient:
        print(f"\n{Colors.RED}–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–æ–ø—Ü–∏—è 5)!{Colors.ENDC}")
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")
        continue

      sessions = manager.get_sessions()
      if not sessions:
        print(f"\n{Colors.YELLOW}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π{Colors.ENDC}")
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")
        continue
      print(f"\n{Colors.BOLD}–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é:{Colors.ENDC}")
      for i, session in enumerate(sessions, 1):
        print(f"{Colors.CYAN}{i}.{Colors.ENDC} {session}")

      try:
        idx = int(input(f"\n{Colors.BOLD}–ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏: {Colors.ENDC}")) - 1
        if 0 <= idx < len(sessions):
          farmer = SuslikFarmer(
            sessions[idx],
            manager.api_id,
            manager.api_hash,
            recipient
          )
          await farmer.start_continuous_farming()
      except (ValueError, IndexError):
        print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.ENDC}")
      except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}–§–∞—Ä–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")

      input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")

    elif choice == '4':
      # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
      if not recipient:
        print(f"\n{Colors.RED}–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–æ–ø—Ü–∏—è 5)!{Colors.ENDC}")
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")
        continue

      sessions = manager.get_sessions()
      if not sessions:
        print(f"{Colors.YELLOW}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π{Colors.ENDC}")
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")
        continue

      print(f"\n{Colors.GREEN}–ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∞ –¥–ª—è {len(sessions)} —Å–µ—Å—Å–∏–π...{Colors.ENDC}")

      try:
        tasks = []
        for session in sessions:
          farmer = SuslikFarmer(
            session,
            manager.api_id,
            manager.api_hash,
            recipient
          )
          tasks.append(farmer.start_continuous_farming())

        await asyncio.gather(*tasks)
      except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}–§–∞—Ä–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")

      input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")

    elif choice == '5':
      # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      new_recipient = input(f"\n{Colors.CYAN}–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {Colors.ENDC}").strip()
      if new_recipient:
        recipient = new_recipient
        print(f"{Colors.GREEN}‚úì –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {recipient}{Colors.ENDC}")
      else:
        print(f"{Colors.RED}–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º{Colors.ENDC}")

      input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")

    elif choice == '0':
      print(f"\n{Colors.GREEN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.ENDC}")
      break

    else:
      print(f"\n{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{Colors.ENDC}")
      input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.ENDC}")

if __name__ == '__main__':
  try:
    asyncio.run(main())
  except KeyboardInterrupt:
    print(f"\n{Colors.YELLOW}–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")